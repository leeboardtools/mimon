/**
 * @typedef NamedEnumValue   The object signature for enumeration values that have a name property. Typically the enumeration
 * values will have additional properties such as a user description.
 * @property {string}   name    The name associated with the enumeration value.
 */

/**
 * @typedef NamedEnum  A named enumeration is simply an object whose properties are {@link NamedEnumValue}
 * @example
 *  const QualityTypes = {
 *      LOW: { name: "LOW", level: 0 },
 *      MEDIUM: { name: "MEDIUM", level: 5 },
 *      HIGH: { name: "HIGH", level: 10 },
 *  }
 *
 *  let type = QualityTypes.LOW;
 */

/**
 * Converts a named enum value into an option value that can be processed back into the original enum value
 * by {@link namedEnumFromOption}.
 * @param {NamedEnumValue} enumValue The named enumeration object value.
 * @returns {string}    The option string.
 */
export function namedEnumToOption(enumValue) {
    return enumValue.name;
}

/**
 * Parses an option value generated by {@link namedEnumToOption} back into the original enum value.
 * @param {NamedEnum} enums The named enumeration object.
 * @param {string|NamedEnumValue} option The option from {@link namedEnumToOption} or an actual {@link NamedEnumValue}.
 * @param {NamedEnumValue} [defValue=undefined] The enum value to return if option cannot be processed.
 */
export function namedEnumFromOption(enums, option, defValue) {
    if (option) {
        if (option.name) {
            option = option.name;
        }

        if (typeof option === 'string') {
            const value = enums[option];
            if (value) {
                return value;
            }
        }
    }

    return defValue;
}
